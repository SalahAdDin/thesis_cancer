enum ActivityType {
    LIKE
    COMMENT
    FOLLOW
    NEW_POSt
}

enum ContentType {
    INFORMATION
    TREATMENT
    ACADEMY
    SUCCESS_STORIES
}

enum QuestionType {
    BOOL
    MULTIPLE
    OPEN
    SINGLE
}

enum UserRole {
    ADMIN
    PILOT
    TEST
    CONTROL
}

type User
@model
@auth(
    rules: [
        { allow: owner }
        { allow: groups, groups: ["Admin"], operations: [delete] }
        { allow: groups, groups: ["Users"], operations: [read] }
    ]
) {
    id: ID!
    email: String!
    displayName: String!
    role: UserRole!
    phoneNumber: String
    isConfirmed: Boolean
    hasSeenTutorial: Boolean
    hasSeenIntroductoryVideo: Boolean
    darkMode: Boolean
    bio: String
    photoID: ID!
    photo: UploadFile @connection(fields: ["photoID"])
    gallery: [UploadFile] @connection(keyName: "byUser", fields: ["id"])
    posts: [Post] @connection(keyName: "byUser", fields: ["id"])
    comments: [Comment] @connection(keyName: "byUser", fields: ["id"])
    likes: [Likes] @connection(keyName: "byUser", fields: ["id"])
}

type UploadFile
@model
@auth(
    rules: [
        { allow: owner }
        { allow: groups, groups: ["Admin"], operations: [delete, read] }
        { allow: groups, groups: ["Users"], operations: [read] }
    ]
)
@key(name: "byPost", fields: ["postID", "description"])
@key(name: "byUser", fields: ["userID", "description"]) {
    id: ID!
    url: String!
    description: String! # Generated by `media_userID_postID_id`
    postID: ID
    post: Post @connection(fields: ["postID"])
    userID: ID
    user: User @connection(fields: ["userID"])
}

type Likes
@model
@auth(
    rules: [
        { allow: owner }
        { allow: groups, groups: ["Users"], operations: [read] }
    ]
)
@key(name: "byPost", fields: ["postID", "userID"])
@key(name: "byUser", fields: ["userID", "postID"]) {
    id: ID!
    postID: ID!
    userID: ID!
    post: Post! @connection(fields: ["postID"])
    user: User! @connection(fields: ["userID"])
}

type Post
@model
@auth(
    rules: [
        { allow: owner }
        { allow: groups, groups: ["Admin"], operations: [delete, read] }
        { allow: groups, groups: ["Users"], operations: [read] }
    ]
)
@key(name: "byUser", fields: ["userID"]) {
    id: ID!
    type: ContentType!
    content: String!
    userID: ID!
    author: User! @connection(fields: ["userID"])
    comments: [Comment] @connection(keyName: "byPost", fields: ["id"])
    likes: [Likes] @connection(keyName: "byPost", fields: ["id"])
    media: [UploadFile!] @connection(keyName: "byPost", fields: ["id"])
}

type Comment
@model
@auth(
    rules: [
        { allow: owner }
        { allow: groups, groups: ["Admin"], operations: [delete, read] }
        { allow: groups, groups: ["Users"], operations: [read] }
    ]
)
@key(name: "byPost", fields: ["postID", "content"])
@key(name: "byUser", fields: ["userID", "content"]) {
    id: ID!
    postID: ID!
    post: Post! @connection(fields: ["postID"])
    userID: ID!
    author: User! @connection(fields: ["userID"])
    content: String!
}

type Survey
@model
@auth(
    rules: [
        { allow: owner }
        { allow: groups, groups: ["Admin"] }
        { allow: groups, groups: ["Users"], operations: [read] }
    ]
) {
    id: ID!
    title: String!
    intro: String
    questions: [Question] @connection(keyName: "bySurvey", fields: ["id"])
}

type Question
@model
@auth(
    rules: [
        { allow: owner }
        { allow: groups, groups: ["Admin"] }
        { allow: groups, groups: ["Users"], operations: [read] }
    ]
)
@key(name: "bySurvey", fields: ["surveyID"]) {
    id: ID!
    statement: String!
    type: QuestionType!
    answer: String
    surveyID: ID!
    survey: Survey! @connection(fields: ["surveyID"])
}

type UserSurveyResult
@model
@auth(
    rules: [
        { allow: owner }
        { allow: groups, groups: ["Admin"], operations: [read] }
    ]
)
@key(name: "bySurveyResult", fields: ["userID", "surveyID"])
{
    id: ID!
    userID: ID!
    user: User! @connection(fields: ["userID"])
    surveyID: ID!
    survey: Survey! @connection(fields: ["surveyID"])
    iteration: Int
    answers: [UserSurveyAnswer] @connection(keyName: "byUserSurveyResult", fields: ["id"])
}

# TODO: Review queries here.
type UserSurveyAnswer
@model
@auth(
    rules: [
        { allow: owner }
        { allow: groups, groups: ["Admin"], operations: [read] }
    ]
)
@key(
    name: "surveyAnswersByUserResult"
    fields: ["userSurveyResultID", "questionID"]
) {
    id: ID!
    userSurveyResultID: ID!
    userSurveyResult: UserSurveyResult! @connection(fields: ["userSurveyResultID"])
    questionID: ID!
    question: Question! @connection(fields: ["questionID"])
    answer: String!
}

# TODO: more generic
type ActivityFeed
@model
@auth(
    rules: [
        { allow: owner }
        { allow: groups, groups: ["Admin", "Users"], operations: [read] }
    ]
) {
    id: ID!
    type: ActivityType!
    userID: ID!
    user: User! @connection(fields: ["userID"])
    postID: ID
    post: Post @connection(fields: ["postID"])
}
